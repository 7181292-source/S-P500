# sp500papertraderhebrew_full.py
import streamlit as st
import yfinance as yf
import pandas as pd
import datetime as dt
import matplotlib.pyplot as plt
import snscrape.modules.twitter as sntwitter
from googletrans import Translator
from textblob import TextBlob

# -----------------------------
# הגדרות ראשוניות ועיצוב
# -----------------------------
st.set_page_config(page_title="סוחר וירטואלי S&P 500", layout="wide")
st.markdown("""
<style>
h1, h2, h3 {
    text-align: center;
    color: #2E86C1;
}
.intro {
    background-color: #F2F3F4;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
}
.tab-header {
    font-size: 18px;
    font-weight: bold;
    color: #2E86C1;
}
</style>
""", unsafe_allow_html=True)

st.markdown("""
<div class="intro">
<h2>ברוכים הבאים לסוחר הווירטואלי במדד S&P 500 📈</h2>
<p>אפליקציה אינטראקטיבית עם כסף מדומה, גרפים, פוזיציות, ציוצים, ניתוח רגשות והמלצות אוטומטיות!</p>
</div>
""", unsafe_allow_html=True)

translator = Translator()

# -----------------------------
# מצב סשן
# -----------------------------
if "יתרה" not in st.session_state:
    st.session_state["יתרה"] = 10000.0
if "פוזיציות" not in st.session_state:
    st.session_state["פוזיציות"] = {}
if "עסקאות" not in st.session_state:
    st.session_state["עסקאות"] = []
if "היסטוריה" not in st.session_state:
    st.session_state["היסטוריה"] = None

# -----------------------------
# פונקציות עזר
# -----------------------------
def טען_מחירים(סימול="^GSPC", תקופה="1mo", מרווח="1d"):
    df = yf.download(סימול, period=תקופה, interval=מרווח, progress=False)
    if df.empty:
        return None
    df.index = pd.to_datetime(df.index)
    return df[['Open','High','Low','Close','Volume']]

def מחיר_נוכחי(סימול="^GSPC"):
    df = טען_מחירים(סימול, תקופה="5d")
    if df is None or df.empty:
        return None
    return float(df['Close'].iloc[-1])

def קנייה(סימול="^GSPC", סכום=None, מניות=None):
    מחיר = מחיר_נוכחי(סימול)
    if מחיר is None:
        st.warning("לא ניתן לקבל מחיר כרגע")
        return
    if מניות is None and סכום is not None:
        מניות = int(סכום // מחיר)
    if מניות is None or מניות <= 0:
        st.warning("כמות לא מספיקה")
        return
    עלות = מניות * מחיר
    if עלות > st.session_state["יתרה"]:
        st.warning("אין מספיק יתרה")
        return
    st.session_state["יתרה"] -= עלות
    פוזיציה = st.session_state["פוזיציות"].get(סימול, {"מניות":0,"מחיר ממוצע":0.0})
    סהכ = פוזיציה["מניות"] + מניות
    ממוצע = (פוזיציה["מחיר ממוצע"] * פוזיציה["מניות"] + מחיר * מניות) / סהכ
    st.session_state["פוזיציות"][סימול] = {"מניות": סהכ, "מחיר ממוצע": ממוצע}
    st.session_state["עסקאות"].append({
        "זמן": dt.datetime.utcnow(),
        "סימול": סימול,
        "פעולה": "קנייה",
        "מניות": מניות,
        "מחיר": מחיר,
        "יתרה לאחר": st.session_state["יתרה"]
    })

def מכירה(סימול="^GSPC", מניות=None):
    מחיר = מחיר_נוכחי(סימול)
    פוזיציה = st.session_state["פוזיציות"].get(סימול)
    if פוזיציה is None or פוזיציה["מניות"] <= 0:
        st.warning("אין פוזיציה למכירה")
        return
    if מניות is None or מניות > פוזיציה["מניות"]:
        מניות = פוזיציה["מניות"]
    הכנסה = מניות * מחיר
    st.session_state["יתרה"] += הכנסה
    פוזיציה["מניות"] -= מניות
    if פוזיציה["מניות"] == 0:
        פוזיציה["מחיר ממוצע"] = 0.0
    st.session_state["פוזיציות"][סימול] = פוזיציה
    st.session_state["עסקאות"].append({
        "זמן": dt.datetime.utcnow(),
        "סימול": סימול,
        "פעולה": "מכירה",
        "מניות": מניות,
        "מחיר": מחיר,
        "יתרה לאחר": st.session_state["יתרה"]
    })

def הוסף_כסף(סכום):
    if סכום > 0:
        st.session_state["יתרה"] += סכום
        st.success(f"הוספת ${סכום} ליתרה בהצלחה!")

def ציוצים(חיפוש="S&P 500", כמות=30):
    ציוצים = []
    תוכן_ייחודי = set()
    for i, tweet in enumerate(sntwitter.TwitterSearchScraper(חיפוש).get_items()):
        if i >= כמות:
            break
        טקסט = tweet.content.strip()
        if טקסט in תוכן_ייחודי:
            continue
        תוכן_ייחודי.add(טקסט)
        try:
            תרגום = translator.translate(טקסט, src='en', dest='he').text
        except:
            תרגום = "שגיאה בתרגום"
        רגש = TextBlob(טקסט).sentiment.polarity
        if רגש > 0.1:
            מצב_רגש = "חיובי"
        elif רגש < -0.1:
            מצב_רגש = "שלילי"
        else:
            מצב_רגש = "נייטרלי"
        ציוצים.append({
            "תאריך": tweet.date,
            "אנגלית": טקסט,
            "עברית": תרגום,
            "רגש": מצב_רגש
        })
    return pd.DataFrame(ציוצים)

def המלצה_אוטומטית(df_ציוצים):
    סך_ציוצים = len(df_ציוצים)
    חיובי = sum(df_ציוצים["רגש"] == "חיובי")
    שלילי = sum(df_ציוצים["רגש"] == "שלילי")
    נייטרלי = סך_ציוצים - חיובי - שלילי
    if סך_ציוצים == 0:
        return "אין מספיק מידע להמלצה כרגע."
    if חיובי > שלילי and חיובי > נייטרלי:
        return f"נראה שרוב הציוצים חיוביים ({חיובי}/{סך_ציוצים}) — ייתכן שכדאי לשקול קנייה."
    elif שלילי > חיובי and שלילי > נייטרלי:
        return f"נראה שרוב הציוצים שליליים ({שלילי}/{סך_ציוצים}) — ייתכן שכדאי להמתין או לשקול מכירה."
    else:
        return f"הרגשות מעורבים ({חיובי} חיובי, {שלילי} שלילי, {נייטרלי} נייטרלי) — אין המלצה ברורה כרגע."

# -----------------------------
# ממשק עם טאבים
# -----------------------------
tabs = st.tabs(["גרף", "פוזיציות", "קנייה/מכירה", "ציוצים"])

# --- גרף ---
with tabs[0]:
    st.header("גרף מחירים היסטורי")
    תקופה = st.selectbox("בחר תקופת היסטוריה", ["1mo","3mo","6mo"], index=0, key="גרף")
    if st.button("טען גרף"):
        df = טען_מחירים(תקופה=תקופה)
        if df is None:
            st.warning("לא נמצאו נתונים")
        else:
            st.session_state["היסטוריה"] = df
            st.success("הנתונים נטענו")
    if st.session_state["היסטוריה"] is not None:
        df = st.session_state["היסטוריה"]
        fig, ax = plt.subplots(figsize=(10,4))
        ax.plot(df.index, df['Close'], label='מחיר סגירה', color="#2E86C1")
        ax.set_title("גרף S&P 500")
        ax.set_xlabel("תאריך")
        ax.set_ylabel("מחיר")
        ax.grid(True)
        st.pyplot(fig)

# --- פוזיציות ---
with tabs[1]:
    st.header("פוזיציות נוכחיות")
    if st.session_state["פוזיציות"]:
        for סימול, פוזיציה in st.session_state["פוזיציות"].items():
            currentprice = מחיר_נוכחי(סימול)
            if currentprice:
                רווחהפסד = (currentprice - פוזיציה["מחיר ממוצע"]) * פוזיציה["מניות"]
            else:
                רווחהפסד = 0
            st.write(f"{סימול}: {פוזיציה['מניות']} מניות — מחיר ממוצע ${פוזיציה['מחיר ממוצע']:.2f} — רווח/הפסד ${רווחהפסד:,.2f}")
    else:
        st.write("אין פוזיציות כרגע")
    st.metric("יתרה נוכחית", f"${st.session_state['יתרה']:,.2f}")

# --- קנייה/מכירה ---
with tabs[2]:
    st.header("קנייה / מכירה מהירה")
    סכוםקנייה = st.number_input("קנייה בסכום ($)", value=1000, step=100)
    if st.button("בצע קנייה"):
        קנייה(סכום=סכוםקנייה)
    כמותמכירה = st.number_input("מכירה בכמות מניות", value=0, step=1)
    if st.button("בצע מכירה"):
        מכירה(מניות=int(כמותמכירה))
    st.subheader("הוספת כסף ליתרה")
    סכום_חדש = st.number_input("סכום להוספה ($)", value=0, step=100)
    if st.button("הוסף כסף"):
        הוסף_כסף(סכום_חדש)

# --- ציוצים ---
with tabs[3]:
    st.header("ציוצים וניתוח רגשות")
    if st.button("בדוק ציוצים"):
        df_ציוצים = ציוצים()
        st.dataframe(df_ציוצים)
        st.subheader("המלצה אוטומטית לפי רגשות")
        st.info(המלצה_אוטומטית(df_ציוצים))